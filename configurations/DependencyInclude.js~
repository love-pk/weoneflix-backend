/*
 * Requirement - include all the global variables and module required by the application
 */

global.express = require('express');
global.multer = require('multer');
global.errorHandler = require('errorhandler')
global.bodyParser = require('body-parser')
global.Promise = require('node-promise').Promise
global.async = require('async')
global.crypto = require('crypto')
global.uuid = require('node-uuid');
global.winston = require('winston');
global._ = require('underscore');
global.ifAsync = require('if-async')
global.fs = require('fs');
global.http = require('http');
global.rootPath = __dirname;
global.kaltura = require('kaltura');
global.CronJob = require('cron').CronJob;

// Database dependencies and Connection setting 

global.mongoose = require('mongoose');
global.mongooseSchema = mongoose.Schema;
global.dbConnection = require('./Datasource.js').getDbConnection()
global.passport = require('passport');
global.FacebookStrategy = require('passport-facebook').Strategy;

//global variable to hold all the environment specific configuration
global.configurationHolder = {}

// Application specific configuration details
configurationHolder.config = require('./Conf.js').configVariables()
configurationHolder.ResponseUtil = require('../application-utilities/ResponseHandler.js')

//Application specific intial program to execute when server starts
configurationHolder.Bootstrap = require('./Bootstrap.js')

// Application specific security authorization middleware
configurationHolder.security = require('../application-middlewares/AuthorizationMiddleware').AuthorizationMiddleware

//UTILITY CLASSES
configurationHolder.EmailUtil = require('../application-utilities/EmailUtility')
configurationHolder.errorMessage = require('./ApplicationMessages').appErrorMessages
configurationHolder.appSuccessMessage = require('./ApplicationMessages').appSuccessMessage
global.Logger = require('../application-utilities/LoggerUtility').logger
configurationHolder.appConstants = require('./ApplicationConstants').appConstants


module.exports = configurationHolder
